#include "NimBLEDevice.h"

NimBLECharacteristic* repCharacteristic;
NimBLECharacteristic* commandCharacteristic;
NimBLEAdvertising* advertising;
int repCount = 0;
bool recording = false;

#define SERVICE_UUID "4fafc201-1fb5-459e-8fcc-c5c9c331914b"
#define REP_CHARACTERISTIC_UUID "beb5483e-36e1-4688-b7f5-ea07361b26a8"
#define COMMAND_CHARACTERISTIC_UUID "6e400002-b5a3-f393-e0a9-e50e24dcca9e"

//C:\Users\shane\Documents\PlatformIO\Projects\ESP32-Tutorial-2\.pio\libdeps\upesy_wroom\NimBLE-Arduino\src
class MyServerCallbacks : public NimBLEServerCallbacks {
  void onConnect(NimBLEServer* server, NimBLEConnInfo& connInfo) override {
    Serial.println("✅ Connected to phone");
  }

  void onDisconnect(NimBLEServer* server, NimBLEConnInfo& connInfo, int reason) override {
    Serial.println("❌ Client disconnected");
    NimBLEDevice::startAdvertising();
  }
};


class CommandCallbacks: public NimBLECharacteristicCallbacks {
  void onWrite(NimBLECharacteristic* characteristic, NimBLEConnInfo& connInfo) override {
    std::string value = characteristic->getValue();
    Serial.print("got command: ");
    Serial.println(value.c_str());
    if (value == "START_RECORDING"){
      recording = true;
    } else if (value == "STOP_RECORDING"){
      recording = false;
    } else if (value == "CALIBRATE"){

    }
  }
};

void setup(){
  Serial.begin(9600);
  NimBLEDevice::init("RepCounter");

  NimBLEServer* server = NimBLEDevice::createServer();
  server->setCallbacks(new MyServerCallbacks());

  Serial.println("set server callbacks");

  NimBLEService* service = server->createService(SERVICE_UUID);
  repCharacteristic = service->createCharacteristic(
    REP_CHARACTERISTIC_UUID,
    NIMBLE_PROPERTY::READ | NIMBLE_PROPERTY::NOTIFY
  );
  repCharacteristic->setValue("0");

  commandCharacteristic= service->createCharacteristic(
    COMMAND_CHARACTERISTIC_UUID,
    NIMBLE_PROPERTY::WRITE | NIMBLE_PROPERTY::WRITE_NR
  );
  commandCharacteristic->setCallbacks(new CommandCallbacks());
  Serial.println("set command callbacks");
  
  service->start();

  advertising = NimBLEDevice::getAdvertising();

  advertising->addServiceUUID(SERVICE_UUID);
  advertising->setName("RepCounter");
  advertising->enableScanResponse(true);
  advertising->start();
  Serial.println("Advertising has started");
}

void loop(){
  delay(1000);
  if (!recording){
    return;
  }

  String repStr = String(repCount);
  repCharacteristic->setValue(repStr.c_str());
  repCharacteristic->notify();

  Serial.println("Sent rep count: " + repStr);
}

